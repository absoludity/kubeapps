// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	v1 "github.com/kubeapps/kubeapps/cmd/kubeapps-api-service/core/packages/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PackagesClient is the client API for Packages service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackagesClient interface {
	GetAvailablePackages(ctx context.Context, in *v1.GetAvailablePackagesRequest, opts ...grpc.CallOption) (Packages_GetAvailablePackagesClient, error)
}

type packagesClient struct {
	cc grpc.ClientConnInterface
}

func NewPackagesClient(cc grpc.ClientConnInterface) PackagesClient {
	return &packagesClient{cc}
}

func (c *packagesClient) GetAvailablePackages(ctx context.Context, in *v1.GetAvailablePackagesRequest, opts ...grpc.CallOption) (Packages_GetAvailablePackagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Packages_ServiceDesc.Streams[0], "/kubeapps.api.packages.v1.helm.Packages/GetAvailablePackages", opts...)
	if err != nil {
		return nil, err
	}
	x := &packagesGetAvailablePackagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Packages_GetAvailablePackagesClient interface {
	Recv() (*v1.AvailablePackage, error)
	grpc.ClientStream
}

type packagesGetAvailablePackagesClient struct {
	grpc.ClientStream
}

func (x *packagesGetAvailablePackagesClient) Recv() (*v1.AvailablePackage, error) {
	m := new(v1.AvailablePackage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PackagesServer is the server API for Packages service.
// All implementations must embed UnimplementedPackagesServer
// for forward compatibility
type PackagesServer interface {
	GetAvailablePackages(*v1.GetAvailablePackagesRequest, Packages_GetAvailablePackagesServer) error
	mustEmbedUnimplementedPackagesServer()
}

// UnimplementedPackagesServer must be embedded to have forward compatible implementations.
type UnimplementedPackagesServer struct {
}

func (UnimplementedPackagesServer) GetAvailablePackages(*v1.GetAvailablePackagesRequest, Packages_GetAvailablePackagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetAvailablePackages not implemented")
}
func (UnimplementedPackagesServer) mustEmbedUnimplementedPackagesServer() {}

// UnsafePackagesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackagesServer will
// result in compilation errors.
type UnsafePackagesServer interface {
	mustEmbedUnimplementedPackagesServer()
}

func RegisterPackagesServer(s grpc.ServiceRegistrar, srv PackagesServer) {
	s.RegisterService(&Packages_ServiceDesc, srv)
}

func _Packages_GetAvailablePackages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.GetAvailablePackagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PackagesServer).GetAvailablePackages(m, &packagesGetAvailablePackagesServer{stream})
}

type Packages_GetAvailablePackagesServer interface {
	Send(*v1.AvailablePackage) error
	grpc.ServerStream
}

type packagesGetAvailablePackagesServer struct {
	grpc.ServerStream
}

func (x *packagesGetAvailablePackagesServer) Send(m *v1.AvailablePackage) error {
	return x.ServerStream.SendMsg(m)
}

// Packages_ServiceDesc is the grpc.ServiceDesc for Packages service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Packages_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubeapps.api.packages.v1.helm.Packages",
	HandlerType: (*PackagesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetAvailablePackages",
			Handler:       _Packages_GetAvailablePackages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "plugins/helm/packages/v1/server/helm.proto",
}
