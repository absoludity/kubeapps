// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	v1 "github.com/kubeapps/kubeapps/cmd/kubeapps-api-service/kubeappsapis/core/packages/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PackagesServiceClient is the client API for PackagesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PackagesServiceClient interface {
	GetInstalledPackages(ctx context.Context, in *v1.GetInstalledPackagesRequest, opts ...grpc.CallOption) (PackagesService_GetInstalledPackagesClient, error)
}

type packagesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPackagesServiceClient(cc grpc.ClientConnInterface) PackagesServiceClient {
	return &packagesServiceClient{cc}
}

func (c *packagesServiceClient) GetInstalledPackages(ctx context.Context, in *v1.GetInstalledPackagesRequest, opts ...grpc.CallOption) (PackagesService_GetInstalledPackagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PackagesService_ServiceDesc.Streams[0], "/kubeappsapis.plugins.packages.helm.v1.PackagesService/GetInstalledPackages", opts...)
	if err != nil {
		return nil, err
	}
	x := &packagesServiceGetInstalledPackagesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PackagesService_GetInstalledPackagesClient interface {
	Recv() (*v1.InstalledPackageSummary, error)
	grpc.ClientStream
}

type packagesServiceGetInstalledPackagesClient struct {
	grpc.ClientStream
}

func (x *packagesServiceGetInstalledPackagesClient) Recv() (*v1.InstalledPackageSummary, error) {
	m := new(v1.InstalledPackageSummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PackagesServiceServer is the server API for PackagesService service.
// All implementations must embed UnimplementedPackagesServiceServer
// for forward compatibility
type PackagesServiceServer interface {
	GetInstalledPackages(*v1.GetInstalledPackagesRequest, PackagesService_GetInstalledPackagesServer) error
	mustEmbedUnimplementedPackagesServiceServer()
}

// UnimplementedPackagesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPackagesServiceServer struct {
}

func (UnimplementedPackagesServiceServer) GetInstalledPackages(*v1.GetInstalledPackagesRequest, PackagesService_GetInstalledPackagesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetInstalledPackages not implemented")
}
func (UnimplementedPackagesServiceServer) mustEmbedUnimplementedPackagesServiceServer() {}

// UnsafePackagesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PackagesServiceServer will
// result in compilation errors.
type UnsafePackagesServiceServer interface {
	mustEmbedUnimplementedPackagesServiceServer()
}

func RegisterPackagesServiceServer(s grpc.ServiceRegistrar, srv PackagesServiceServer) {
	s.RegisterService(&PackagesService_ServiceDesc, srv)
}

func _PackagesService_GetInstalledPackages_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(v1.GetInstalledPackagesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PackagesServiceServer).GetInstalledPackages(m, &packagesServiceGetInstalledPackagesServer{stream})
}

type PackagesService_GetInstalledPackagesServer interface {
	Send(*v1.InstalledPackageSummary) error
	grpc.ServerStream
}

type packagesServiceGetInstalledPackagesServer struct {
	grpc.ServerStream
}

func (x *packagesServiceGetInstalledPackagesServer) Send(m *v1.InstalledPackageSummary) error {
	return x.ServerStream.SendMsg(m)
}

// PackagesService_ServiceDesc is the grpc.ServiceDesc for PackagesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PackagesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kubeappsapis.plugins.packages.helm.v1.PackagesService",
	HandlerType: (*PackagesServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetInstalledPackages",
			Handler:       _PackagesService_GetInstalledPackages_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "kubeappsapis/plugins/packages/helm/v1/helm.proto",
}
